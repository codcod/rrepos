name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          ## Changes
          
          Please see [CHANGELOG.md](CHANGELOG.md) for details.
          
          ## Installation
          
          ### Binary Downloads
          
          You can download pre-built binaries for your platform from the assets below.
          
          ### Cargo Install
          
          ```bash
          cargo install rrepos
          ```
          
          ### From Source
          
          ```bash
          git clone https://github.com/${{ github.repository }}.git
          cd rrepos
          cargo build --release
          ```

  build-release:
    name: Build Release Binary
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            suffix: ""
        #   - os: windows-latest
        #     target: x86_64-pc-windows-msvc
        #     suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install musl tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get update && sudo apt-get install -y musl-tools

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/rrepos${{ matrix.suffix }}

    - name: Create archive
      shell: bash
      run: |
        staging="rrepos-${{ needs.create-release.outputs.version }}-${{ matrix.target }}"
        mkdir -p "$staging"
        
        cp target/${{ matrix.target }}/release/rrepos${{ matrix.suffix }} "$staging/"
        cp README.md LICENSE* "$staging/" 2>/dev/null || true
        
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream

#   publish-crate:
#     name: Publish to crates.io
#     needs: [create-release, build-release]
#     runs-on: ubuntu-latest
#     if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Install Rust
#       uses: dtolnay/rust-toolchain@stable

#     - name: Cache dependencies
#       uses: actions/cache@v4
#       with:
#         path: |
#           ~/.cargo/bin/
#           ~/.cargo/registry/index/
#           ~/.cargo/registry/cache/
#           ~/.cargo/git/db/
#           target/
#         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

#     - name: Publish to crates.io
#       run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

#   docker-release:
#     name: Build and Push Docker Image
#     needs: create-release
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3

#     - name: Log in to Docker Hub
#       uses: docker/login-action@v3
#       with:
#         username: ${{ secrets.DOCKER_USERNAME }}
#         password: ${{ secrets.DOCKER_PASSWORD }}

#     - name: Extract metadata
#       id: meta
#       uses: docker/metadata-action@v5
#       with:
#         images: ${{ secrets.DOCKER_USERNAME }}/rrepos
#         tags: |
#           type=ref,event=tag
#           type=semver,pattern={{version}}
#           type=semver,pattern={{major}}.{{minor}}
#           type=semver,pattern={{major}}

#     - name: Build and push Docker image
#       uses: docker/build-push-action@v5
#       with:
#         context: .
#         platforms: linux/amd64,linux/arm64
#         push: true
#         tags: ${{ steps.meta.outputs.tags }}
#         labels: ${{ steps.meta.outputs.labels }}
#         cache-from: type=gha
#         cache-to: type=gha,mode=max
